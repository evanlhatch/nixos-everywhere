# justfile\n# Main orchestrator for NixOS on Hetzner deployments.\n\n# --- Configuration Loading ---\n# Load .env file if it exists\nset dotenv-load := true\n\n# --- Default Variables ---\n# These can be overridden by environment variables or command-line arguments to just.\n\n# Hetzner Server Defaults\nDEFAULT_HETZNER_SERVER_NAME          := \"nixos-test\"\nDEFAULT_HETZNER_SERVER_TYPE          := env_var_or_default(\'HETZNER_DEFAULT_SERVER_TYPE\', \'cpx21\')\nDEFAULT_HETZNER_BASE_IMAGE           := env_var_or_default(\'HETZNER_DEFAULT_BASE_IMAGE\', \'debian-12\')\nDEFAULT_HETZNER_LOCATION             := env_var_or_default(\'HETZNER_DEFAULT_LOCATION\', \'ash\')\nDEFAULT_HETZNER_SSH_KEY_NAME         := env_var_or_default(\'HETZNER_SSH_KEY_NAME_OR_FINGERPRINT\', \'blade-nixos SSH Key\')\nDEFAULT_HETZNER_NETWORK              := env_var_or_default(\'HETZNER_DEFAULT_NETWORK\', \'k3s-net\')\nDEFAULT_HETZNER_VOLUME               := env_var_or_default(\'HETZNER_DEFAULT_VOLUME\', \'volume-ash-1\')\nDEFAULT_HETZNER_FIREWALL             := env_var_or_default(\'HETZNER_DEFAULT_FIREWALL\', \'k3s-fw\')\nDEFAULT_HETZNER_PLACEMENT_GROUP      := env_var_or_default(\'HETZNER_DEFAULT_PLACEMENT_GROUP\', \'k3s-placement-group\')\nDEFAULT_HETZNER_LABELS               := env_var_or_default(\'HETZNER_DEFAULT_LABELS\', \'deploy=nixos-everywhere;project=homelab\')\nDEFAULT_HETZNER_ENABLE_IPV4          := env_var_or_default(\'HETZNER_DEFAULT_ENABLE_IPV4\', \'true\')\n\n# NixOS Configuration Defaults\nDEFAULT_NIXOS_FLAKE_URI              := env_var_or_default(\'NIXOS_DEFAULT_FLAKE_URI\', \'github:evanlhatch/k3s-nixos-config\')\nDEFAULT_NIXOS_TARGET_HOST_ATTR       := env_var_or_default(\'NIXOS_DEFAULT_TARGET_HOST_ATTR\', \'hetznerK3sControlTemplate\')\nDEFAULT_NIXOS_CHANNEL_ENV            := env_var_or_default(\'NIXOS_DEFAULT_NIXOS_CHANNEL_ENV\', \'nixos-24.05\')\nDEFAULT_HOSTNAME_INIT_ENV            := env_var_or_default(\'NIXOS_DEFAULT_HOSTNAME_INIT_ENV\', \'nixos-server\')\nDEFAULT_TIMEZONE_INIT_ENV            := env_var_or_default(\'NIXOS_DEFAULT_TIMEZONE_INIT_ENV\', \'Etc/UTC\')\nDEFAULT_LOCALE_LANG_INIT_ENV         := env_var_or_default(\'NIXOS_DEFAULT_LOCALE_LANG_INIT_ENV\', \'en_US.UTF-8\')\nDEFAULT_STATE_VERSION_INIT_ENV       := env_var_or_default(\'NIXOS_DEFAULT_STATE_VERSION_INIT_ENV\', \'24.05\')\nDEFAULT_NIXOS_SSH_USER               := env_var_or_default(\'NIXOS_SSH_USER\', \'root\')\nDEFAULT_NIXOS_SSH_AUTHORIZED_KEYS    := env_var_or_default(\'NIXOS_SSH_AUTHORIZED_KEYS\', \'\') # For infect-debian; ensure this env var is set with your public keys\n\n# Infisical\nDEFAULT_INFISICAL_CLIENT_ID          := env_var_or_default(\'INFISICAL_CLIENT_ID\', \'\')\nDEFAULT_INFISICAL_CLIENT_SECRET      := env_var_or_default(\'INFISICAL_CLIENT_SECRET\', \'\')\nDEFAULT_INFISICAL_BOOTSTRAP_ADDRESS  := env_var_or_default(\'INFISICAL_BOOTSTRAP_ADDRESS\', \'https://app.infisical.com\')\n\n# Deployment Method\nDEFAULT_DEPLOY_METHOD                := \"convert\" # \'convert\' or \'direct\'\n\n# Scripts directory\nSCRIPTS_DIR := \"./scripts\"\n\n# --- Helper Functions ---\n# Generates a random 5-character suffix.\nrandom_suffix := \"test\"\n\n# --- Core Targets ---\n\n# Check local dependencies\ncheck-deps:\n    @echo \"Checking local dependencies...\"\n    @{{SCRIPTS_DIR}}/deps_check.sh\n\n# Show help information\nhelp:\n    @{{SCRIPTS_DIR}}/show_help.sh\n\n# Provision a new server on Hetzner\n# Usage: just provision server_name=\"my-server\" flake_uri=\"github:user/flake#host\" [deploy_method=\"convert\"] [server_type=\"cpx21\"] ...\nprovision server_name flake_uri \\\n    deploy_method=DEFAULT_DEPLOY_METHOD \\\n    server_type=DEFAULT_HETZNER_SERVER_TYPE \\\n    base_image=DEFAULT_HETZNER_BASE_IMAGE \\\n    location=DEFAULT_HETZNER_LOCATION \\\n    ssh_key_name=DEFAULT_HETZNER_SSH_KEY_NAME \\\n    network=DEFAULT_HETZNER_NETWORK \\\n    volume=DEFAULT_HETZNER_VOLUME \\\n    firewall=DEFAULT_HETZNER_FIREWALL \\\n    placement_group=DEFAULT_HETZNER_PLACEMENT_GROUP \\\n    labels=DEFAULT_HETZNER_LABELS \\\n    enable_ipv4=DEFAULT_HETZNER_ENABLE_IPV4 \\\n    nixos_channel=DEFAULT_NIXOS_CHANNEL_ENV \\\n    target_hostname_init=DEFAULT_HOSTNAME_INIT_ENV \\\n    timezone_init=DEFAULT_TIMEZONE_INIT_ENV \\\n    locale_lang_init=DEFAULT_LOCALE_LANG_INIT_ENV \\\n    state_version_init=DEFAULT_STATE_VERSION_INIT_ENV \\\n    infisical_client_id=DEFAULT_INFISICAL_CLIENT_ID \\\n    infisical_client_secret=DEFAULT_INFISICAL_CLIENT_SECRET \\\n    infisical_bootstrap_address=DEFAULT_INFISICAL_BOOTSTRAP_ADDRESS:\n    @echo \"Attempting to provision server \'{{server_name}}\'...\"\n    @echo \"  Flake URI: {{flake_uri}}\"\n    @echo \"  Deployment Method: {{deploy_method}}\"\n    @echo \"  Server Type: {{server_type}}\"\n    @echo \"  Base Image (for conversion): {{base_image}}\"\n    @echo \"  Location: {{location}}\"\n    @echo \"  SSH Key Name (Hetzner): {{ssh_key_name}}\"\n    @echo \"  Network: {{network}}\"\n    @echo \"  Volume: {{volume}}\"\n    @echo \"  Firewall: {{firewall}}\"\n    @echo \"  Placement Group: {{placement_group}}\"\n    @echo \"  Labels: {{labels}}\"\n    @echo \"  Enable IPv4: {{enable_ipv4}}\"\n\n    # Export variables for hetzner_provision.sh\n    @export HCLOUD_TOKEN=\"${HCLOUD_TOKEN}\"; \\\n    export HETZNER_SERVER_NAME=\"{{server_name}}\"; \\\n    export HETZNER_SERVER_TYPE=\"{{server_type}}\"; \\\n    export HETZNER_BASE_IMAGE=\"{{base_image}}\"; \\\n    export HETZNER_LOCATION=\"{{location}}\"; \\\n    export HETZNER_SSH_KEY_NAME=\"{{ssh_key_name}}\"; \\\n    export HETZNER_NETWORK=\"{{network}}\"; \\\n    export HETZNER_VOLUME=\"{{volume}}\"; \\\n    export HETZNER_FIREWALL=\"{{firewall}}\"; \\\n    export HETZNER_PLACEMENT_GROUP=\"{{placement_group}}\"; \\\n    export HETZNER_LABELS=\"{{labels}}\"; \\\n    export HETZNER_ENABLE_IPV4=\"{{enable_ipv4}}\"; \\\n    export NIXOS_FLAKE_URI=\"{{flake_uri}}\"; \\\n    export DEPLOY_METHOD=\"{{deploy_method}}\"; \\\n    export NIXOS_CHANNEL_ENV=\"{{nixos_channel}}\"; \\\n    export HOSTNAME_INIT_ENV=\"{{target_hostname_init}}\"; \\\n    export TIMEZONE_INIT_ENV=\"{{timezone_init}}\"; \\\n    export LOCALE_LANG_INIT_ENV=\"{{locale_lang_init}}\"; \\\nexport STATE_VERSION_INIT_ENV=\"{{state_version_init}}\"; \\\
export INFISICAL_CLIENT_ID=\"{{infisical_client_id}}\"; \\\
export INFISICAL_CLIENT_SECRET=\"{{infisical_client_secret}}\"; \\\
export INFISICAL_BOOTSTRAP_ADDRESS=\"{{infisical_bootstrap_address}}\"; \\\
{{SCRIPTS_DIR}}/hetzner_provision.sh\n\n# Destroy a server on Hetzner\n# Usage: just destroy server_name=\"my-server\"\ndestroy server_name:\n    @echo \"Attempting to destroy server \'{{server_name}}\'...\"\n    @hcloud server delete \"{{server_name}}\" \\\n        || echo \"Failed to delete server \'{{server_name}}\'. It might not exist or an error occurred.\"\n\n# SSH into a provisioned server\n# Usage: just ssh server_name=\"my-server\" [ssh_user=\"root\"] [use_ipv4=\"true\"]\nssh server_name ssh_user=DEFAULT_NIXOS_SSH_USER use_ipv4=DEFAULT_HETZNER_ENABLE_IPV4:\n    @echo \"Attempting to SSH into server \'{{server_name}}\' as user \'{{ssh_user}}\'...\"\n    @if [ \"{{use_ipv4}}\" = \"true\" ]; then \\\n        IPV4=$(hcloud server ip \"{{server_name}}\"); \\\
        echo \"Using IPv4 address: $$IPV4\"; \\\
        ssh {{ssh_user}}@$$IPV4; \\\
    else \\\
        IPV6=$(hcloud server describe \"{{server_name}}\" -o json | jq -r \'.public_net.ipv6.ip\' | sed \'s/::\\/64/::1/g\'); \\\
        echo \"Using IPv6 address: [$$IPV6]\"; \\\
        ssh {{ssh_user}}@[$$IPV6]; \\\
    fi\n\n# Fetch cloud-init logs from a server\n# Usage: just logs server_name=\"my-server\" [ssh_user=\"root\"] [use_ipv4=\"true\"]\nlogs server_name ssh_user=DEFAULT_NIXOS_SSH_USER use_ipv4=DEFAULT_HETZNER_ENABLE_IPV4:\n    @echo \"Fetching cloud-init logs from server \'{{server_name}}\'...\"\n    @export HCLOUD_TOKEN=\"${HCLOUD_TOKEN}\"; \\\
    {{SCRIPTS_DIR}}/fetch_logs.sh \"{{server_name}}\" \"{{ssh_user}}\" \"{{use_ipv4}}\"\n\n# List active Hetzner servers\nlist-servers:\n    @echo \"Listing Hetzner Cloud servers...\"\n    @hcloud server list || echo \"Failed to list servers. Make sure HCLOUD_TOKEN is set.\"\n\n# Infect an existing Debian server with NixOS\n# Usage: just infect-debian server_ip=\"1.2.3.4\" flake_uri=\"github:user/flake#host\" [ssh_user=\"root\"] [nixos_ssh_keys=\"<key_content>\"] [...]\n# Ensure NIXOS_SSH_AUTHORIZED_KEYS environment variable is set if not passing nixos_ssh_keys directly.\ninfect-debian server_ip flake_uri \\\n    ssh_user=DEFAULT_NIXOS_SSH_USER \\\n    nixos_ssh_keys=DEFAULT_NIXOS_SSH_AUTHORIZED_KEYS \\\n    nixos_channel=DEFAULT_NIXOS_CHANNEL_ENV \\\
    target_hostname_init=DEFAULT_HOSTNAME_INIT_ENV \\\
    timezone_init=DEFAULT_TIMEZONE_INIT_ENV \\\
    locale_lang_init=DEFAULT_LOCALE_LANG_INIT_ENV \\\
    state_version_init=DEFAULT_STATE_VERSION_INIT_ENV \\\
    infisical_client_id=DEFAULT_INFISICAL_CLIENT_ID \\\
    infisical_client_secret=DEFAULT_INFISICAL_CLIENT_SECRET \\\
    infisical_bootstrap_address=DEFAULT_INFISICAL_BOOTSTRAP_ADDRESS:\n_NIXOS_EVERYWHERE_SCRIPT_URL := \"https://raw.githubusercontent.com/evanlhatch/nixos-everywhere/refactor-v3/scripts/nixos_everywhere.sh\"\n_REMOTE_COMMAND := format(\" \\\n    export FLAKE_URI_INPUT='{}'; \\\
    export SSH_AUTHORIZED_KEYS_INPUT='{}'; \\\
    export NIXOS_CHANNEL_ENV='{}'; \\\
    export HOSTNAME_INIT_ENV='{}'; \\\
    export TIMEZONE_INIT_ENV='{}'; \\\
    export LOCALE_LANG_INIT_ENV='{}'; \\\
    export STATE_VERSION_INIT_ENV='{}'; \\\
    export INFISICAL_CLIENT_ID_FOR_FLAKE='{}'; \\\
    export INFISICAL_CLIENT_SECRET_FOR_FLAKE='{}'; \\\
    export INFISICAL_ADDRESS_FOR_FLAKE='{}'; \\\
    curl -L {} | bash 2>&1 | tee /var/log/nixos-everywhere-manual-infect.log \\\
\", flake_uri, nixos_ssh_keys, nixos_channel, target_hostname_init, timezone_init, locale_lang_init, state_version_init, infisical_client_id, infisical_client_secret, infisical_bootstrap_address, _NIXOS_EVERYWHERE_SCRIPT_URL)\n@echo \">>> Preparing to infect Debian server: {{ssh_user}}@{{server_ip}}\"\n@echo \"    Flake URI for NixOS: {{flake_uri}}\"\n@echo \"    Target Hostname: {{target_hostname_init}}\"\n@echo \"    SSH User for infection: {{ssh_user}}\"\n\n@bash -c \'if [ -z \"{{nixos_ssh_keys}}\" ]; then echo \"ERROR: SSH authorized keys are not set!\"; echo \"       Ensure the NIXOS_SSH_AUTHORIZED_KEYS environment variable is set, or pass nixos_ssh_keys parameter directly.\"; exit 1; fi\'\n\n@echo \">>> Initiating infection on {{ssh_user}}@{{server_ip}}.\"\n@echo \"    Script URL: {{_NIXOS_EVERYWHERE_SCRIPT_URL}}\"\n\n@ssh -t {{ssh_user}}@{{server_ip}} \"{{_REMOTE_COMMAND}}\"\n\n@echo \">>> Infection process command sent to {{server_ip}}.\"\n@echo \"    Monitor /var/log/nixos-everywhere-manual-infect.log on the server for progress.\"\n@echo \"    This process can take a significant amount of time.\"\n\n\n# Default target: Run check-deps and show help\ndefault:\n    @just check-deps\n    @echo \"\"\n    @just help\n